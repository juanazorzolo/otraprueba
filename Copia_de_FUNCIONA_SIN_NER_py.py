{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/juanazorzolo/otraprueba/blob/main/Copia_de_FUNCIONA_SIN_NER_py.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TpC9VWhm2O9i"
      },
      "source": [
        "### **TRABAJO PRÁCTICO 1 PROCESAMIENTO DEL LENGUAJE NATURAL TUIA 2024**\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BILB2KiF2Xp3"
      },
      "source": [
        "INTEGRANTES:\n",
        "\n",
        "Herrera Morena (H-1187/8)\n",
        "\n",
        "Zorzolo Rubio Juana (Z-1217/3)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DhuN5ryWVAg8"
      },
      "source": [
        "# Importaciones"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PjKfBeZrmArW"
      },
      "outputs": [],
      "source": [
        "!pip install beautifulsoup4\n",
        "!pip install requests\n",
        "!pip install sentiment-analysis-spanish\n",
        "!pip install transformers\n",
        "!python -m spacy download en_core_web_md\n",
        "!pip install sacremoses\n",
        "!pip install gliner"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kfT9AuRsi7E4"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import requests\n",
        "import re\n",
        "import spacy\n",
        "import unicodedata\n",
        "import sacremoses\n",
        "import time\n",
        "from ipywidgets import Text, Button, Output, VBox, HTML, Label\n",
        "from ipywidgets import Text, Button, Output, VBox, HTML\n",
        "from ipywidgets import Text, Button, Output, VBox, HBox\n",
        "from IPython.display import display\n",
        "from tabulate import tabulate\n",
        "from bs4 import BeautifulSoup\n",
        "from transformers import BertTokenizer, BertForSequenceClassification, pipeline, MarianMTModel, MarianTokenizer\n",
        "from sentence_transformers import SentenceTransformer\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\", category=FutureWarning)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yznSUH8ekZV6"
      },
      "source": [
        "# Carga de datos"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GJ42h50HqrDo"
      },
      "source": [
        "Decidimos realizar modificaciones en los nombres de columnas de los conjuntos de datos para simplificar su manejo. Este cambio facilita el manejo de variables y mejora el flujo de trabajo al parsear información."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XJuyNlQgknnW"
      },
      "source": [
        "## Juegos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bN7_Ni1khxGs",
        "outputId": "65bdeaf7-8a2f-4ad0-c94f-19158b7457a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1v1jO8s3g1V4wjyNp58zF3AVwJibS1kll\n",
            "To: /content/bgg_database.csv\n",
            "\r  0% 0.00/1.83M [00:00<?, ?B/s]\r100% 1.83M/1.83M [00:00<00:00, 126MB/s]\n"
          ]
        }
      ],
      "source": [
        "!gdown \"1v1jO8s3g1V4wjyNp58zF3AVwJibS1kll\" --output \"bgg_database.csv\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "JoyNTHl5h6cN",
        "outputId": "7c4e5ef4-94a7-475a-f4a2-55b41c78e386"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rank                          game_name  \\\n",
              "0     1                  Brass: Birmingham   \n",
              "1     2          Pandemic Legacy: Season 1   \n",
              "2     3                         Gloomhaven   \n",
              "3     4                           Ark Nova   \n",
              "4     5  Twilight Imperium: Fourth Edition   \n",
              "\n",
              "                                           game_href  geek_rating  avg_rating  \\\n",
              "0  https://boardgamegeek.com/boardgame/224517/bra...        8.415        8.60   \n",
              "1  https://boardgamegeek.com/boardgame/161936/pan...        8.377        8.53   \n",
              "2  https://boardgamegeek.com/boardgame/174430/glo...        8.349        8.59   \n",
              "3  https://boardgamegeek.com/boardgame/342942/ark...        8.335        8.54   \n",
              "4  https://boardgamegeek.com/boardgame/233078/twi...        8.240        8.60   \n",
              "\n",
              "   num_voters                                        description  \\\n",
              "0     46836.0  Brass: Birmingham is an economic strategy game...   \n",
              "1     53807.0  Pandemic Legacy is a co-operative campaign gam...   \n",
              "2     62592.0  Gloomhaven  is a game of Euro-inspired tactica...   \n",
              "3     44728.0  In Ark Nova, you will plan and design a modern...   \n",
              "4     24148.0  Twilight Imperium (Fourth Edition) is a game o...   \n",
              "\n",
              "   yearpublished  minplayers  maxplayers  minplaytime  maxplaytime  minage  \\\n",
              "0           2018           2           4           60          120      14   \n",
              "1           2015           2           4           60           60      13   \n",
              "2           2017           1           4           60          120      14   \n",
              "3           2021           1           4           90          150      14   \n",
              "4           2017           3           6          240          480      14   \n",
              "\n",
              "   avgweight        best_num_players  \\\n",
              "0     3.8776  [{'min': 3, 'max': 4}]   \n",
              "1     2.8308  [{'min': 4, 'max': 4}]   \n",
              "2     3.9132  [{'min': 3, 'max': 3}]   \n",
              "3     3.7653  [{'min': 2, 'max': 2}]   \n",
              "4     4.3173  [{'min': 6, 'max': 6}]   \n",
              "\n",
              "                                           designers  \\\n",
              "0   ['Gavan Brown', 'Matt Tolman', 'Martin Wallace']   \n",
              "1                     ['Rob Daviau', 'Matt Leacock']   \n",
              "2                                 ['Isaac Childres']   \n",
              "3                                  ['Mathias Wigge']   \n",
              "4  ['Dane Beltrami', 'Corey Konieczka', 'Christia...   \n",
              "\n",
              "                                           mechanics  \\\n",
              "0  ['Hand Management', 'Income', 'Loans', 'Market...   \n",
              "1  ['Action Points', 'Cooperative Game', 'Hand Ma...   \n",
              "2  ['Action Queue', 'Action Retrieval', 'Campaign...   \n",
              "3  ['Action Queue', 'End Game Bonuses', 'Grid Cov...   \n",
              "4  ['Action Drafting', 'Area-Impulse', 'Dice Roll...   \n",
              "\n",
              "                                          categories  \n",
              "0  ['Age of Reason', 'Economic', 'Industry / Manu...  \n",
              "1                       ['Environmental', 'Medical']  \n",
              "2  ['Adventure', 'Exploration', 'Fantasy', 'Fight...  \n",
              "3           ['Animals', 'Economic', 'Environmental']  \n",
              "4  ['Civilization', 'Economic', 'Exploration', 'N...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89a9248d-b75a-4599-85cd-86a96c3c553c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>game_name</th>\n",
              "      <th>game_href</th>\n",
              "      <th>geek_rating</th>\n",
              "      <th>avg_rating</th>\n",
              "      <th>num_voters</th>\n",
              "      <th>description</th>\n",
              "      <th>yearpublished</th>\n",
              "      <th>minplayers</th>\n",
              "      <th>maxplayers</th>\n",
              "      <th>minplaytime</th>\n",
              "      <th>maxplaytime</th>\n",
              "      <th>minage</th>\n",
              "      <th>avgweight</th>\n",
              "      <th>best_num_players</th>\n",
              "      <th>designers</th>\n",
              "      <th>mechanics</th>\n",
              "      <th>categories</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Brass: Birmingham</td>\n",
              "      <td>https://boardgamegeek.com/boardgame/224517/bra...</td>\n",
              "      <td>8.415</td>\n",
              "      <td>8.60</td>\n",
              "      <td>46836.0</td>\n",
              "      <td>Brass: Birmingham is an economic strategy game...</td>\n",
              "      <td>2018</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>60</td>\n",
              "      <td>120</td>\n",
              "      <td>14</td>\n",
              "      <td>3.8776</td>\n",
              "      <td>[{'min': 3, 'max': 4}]</td>\n",
              "      <td>['Gavan Brown', 'Matt Tolman', 'Martin Wallace']</td>\n",
              "      <td>['Hand Management', 'Income', 'Loans', 'Market...</td>\n",
              "      <td>['Age of Reason', 'Economic', 'Industry / Manu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Pandemic Legacy: Season 1</td>\n",
              "      <td>https://boardgamegeek.com/boardgame/161936/pan...</td>\n",
              "      <td>8.377</td>\n",
              "      <td>8.53</td>\n",
              "      <td>53807.0</td>\n",
              "      <td>Pandemic Legacy is a co-operative campaign gam...</td>\n",
              "      <td>2015</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>60</td>\n",
              "      <td>60</td>\n",
              "      <td>13</td>\n",
              "      <td>2.8308</td>\n",
              "      <td>[{'min': 4, 'max': 4}]</td>\n",
              "      <td>['Rob Daviau', 'Matt Leacock']</td>\n",
              "      <td>['Action Points', 'Cooperative Game', 'Hand Ma...</td>\n",
              "      <td>['Environmental', 'Medical']</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Gloomhaven</td>\n",
              "      <td>https://boardgamegeek.com/boardgame/174430/glo...</td>\n",
              "      <td>8.349</td>\n",
              "      <td>8.59</td>\n",
              "      <td>62592.0</td>\n",
              "      <td>Gloomhaven  is a game of Euro-inspired tactica...</td>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>60</td>\n",
              "      <td>120</td>\n",
              "      <td>14</td>\n",
              "      <td>3.9132</td>\n",
              "      <td>[{'min': 3, 'max': 3}]</td>\n",
              "      <td>['Isaac Childres']</td>\n",
              "      <td>['Action Queue', 'Action Retrieval', 'Campaign...</td>\n",
              "      <td>['Adventure', 'Exploration', 'Fantasy', 'Fight...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Ark Nova</td>\n",
              "      <td>https://boardgamegeek.com/boardgame/342942/ark...</td>\n",
              "      <td>8.335</td>\n",
              "      <td>8.54</td>\n",
              "      <td>44728.0</td>\n",
              "      <td>In Ark Nova, you will plan and design a modern...</td>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>90</td>\n",
              "      <td>150</td>\n",
              "      <td>14</td>\n",
              "      <td>3.7653</td>\n",
              "      <td>[{'min': 2, 'max': 2}]</td>\n",
              "      <td>['Mathias Wigge']</td>\n",
              "      <td>['Action Queue', 'End Game Bonuses', 'Grid Cov...</td>\n",
              "      <td>['Animals', 'Economic', 'Environmental']</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Twilight Imperium: Fourth Edition</td>\n",
              "      <td>https://boardgamegeek.com/boardgame/233078/twi...</td>\n",
              "      <td>8.240</td>\n",
              "      <td>8.60</td>\n",
              "      <td>24148.0</td>\n",
              "      <td>Twilight Imperium (Fourth Edition) is a game o...</td>\n",
              "      <td>2017</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>240</td>\n",
              "      <td>480</td>\n",
              "      <td>14</td>\n",
              "      <td>4.3173</td>\n",
              "      <td>[{'min': 6, 'max': 6}]</td>\n",
              "      <td>['Dane Beltrami', 'Corey Konieczka', 'Christia...</td>\n",
              "      <td>['Action Drafting', 'Area-Impulse', 'Dice Roll...</td>\n",
              "      <td>['Civilization', 'Economic', 'Exploration', 'N...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89a9248d-b75a-4599-85cd-86a96c3c553c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-89a9248d-b75a-4599-85cd-86a96c3c553c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-89a9248d-b75a-4599-85cd-86a96c3c553c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-21fd2cd7-c85f-424e-84dc-9f390a88d55c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-21fd2cd7-c85f-424e-84dc-9f390a88d55c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-21fd2cd7-c85f-424e-84dc-9f390a88d55c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_juegos",
              "summary": "{\n  \"name\": \"df_juegos\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 1,\n        \"max\": 1000,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          522,\n          738,\n          741\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"game_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 996,\n        \"samples\": [\n          \"Deep Sea Adventure\",\n          \"Spyfall\",\n          \"Concordia Venus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"game_href\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          \"https://boardgamegeek.com/boardgame/356033/libertalia-winds-of-galecrest\",\n          \"https://boardgamegeek.com/boardgame/113294/escape-the-curse-of-the-temple\",\n          \"https://boardgamegeek.com/boardgame/334065/verdant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geek_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3518662955170911,\n        \"min\": 6.615,\n        \"max\": 8.415,\n        \"num_unique_values\": 632,\n        \"samples\": [\n          7.029,\n          7.167,\n          6.695\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39112182166094933,\n        \"min\": 6.76,\n        \"max\": 9.04,\n        \"num_unique_values\": 178,\n        \"samples\": [\n          8.33,\n          7.98,\n          7.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num_voters\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15876.211423781448,\n        \"min\": 1364.0,\n        \"max\": 128735.0,\n        \"num_unique_values\": 975,\n        \"samples\": [\n          12421.0,\n          24638.0,\n          31551.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          \"In the world of Galecrest, sky pirates set sail on the winds in search of adventure, treasure, and glory. As an admiral, you command a vast and varied crew...but so do your rivals sailing other ships in the pirate fleet. Each day the fleet lands on a different island where you'll send a crew member to collect your share of the loot, hoping they'll return to boost your growing group of characters.\\n\\nLibertalia was originally released in 2012. Ten years later, Libertalia: Winds of Galecrest celebrates the foundations of the original design with a revised and expanded edition that includes all-new art, 40 characters per player, a reputation system to resolve ties, deluxe loot tokens, a robust solo mode, and much more.\\n\\n&mdash;description from the publisher\\n\\n\",\n          \"Escape: The Curse of the Temple is a cooperative game in which players must escape (yes...) from a temple (yes...) which is cursed (yes...) before the temple collapses and kills one or more explorers, thereby causing everyone to lose.\\n\\nThe initial game board consists of a row of three square tiles, each showing a combination of two symbols, say, two green adventurers or one green adventurer and one blue key in one corner of the tile. All of the explorers start in the center tile &ndash; the safe room &ndash; and each player starts with a hand of five dice. Each die has five symbols:\\n\\n\\n    A cursed mask &ndash; this die is set aside when rolled.\\n    A golden mask &ndash; each such symbol counteracts two cursed masks, either your own or those of another explorer in the same room.\\n    A red torch or blue key &ndash; these are used to enter rooms, access treasure, or activate gems.\\n    A green adventurer, which appears twice on the die &ndash; you need these to move from room to room, and to activate some gems.\\n\\n\\nEscape is played in real-time, with all players rolling dice and taking actions simultaneously. You must roll the right symbols to enter a room, and if you're at an open doorway, you can roll to reveal the next tile in the stack and add it to that doorway. Some rooms contain combinations of red and blue symbols, and if you (possibly working with other players in the same room) roll enough red or blue symbols, you &quot;discover&quot; magic gems, moving them from a separate gem depot onto that tile.\\n\\nThe real-time aspect is enforced by a soundtrack to be played during the game. At certain points, a countdown starts, and if players aren't back in the safe room when time is up, they lose one of their dice.\\n\\nOnce the exit tile is revealed, players can attempt to escape the temple by moving to that tile, then rolling a number of blue dice equal to the magic gems that haven't been removed from the gem depot. Thus, the more gems you find, the easier it is to escape the temple. When a player escapes, he gives one die to a player of his choice. If all players escape before the third countdown, everyone wins; if not, everyone loses, no matter how many players did escape.\\n\\nEscape: The Curse of the Temple includes two expansion modules that can be used individually or together. With the &quot;Treasures&quot; module, some rooms contain treasure, and when you reveal such a room, you place a face-down treasure chest on the tile. Roll the symbols on that chest tile, and you claim the treasure for use later: a key lets you teleport anywhere, a path lets you connect two rooms that otherwise have no door between them, and a medic kit heals all players instantly (putting black dice back into play). With the &quot;Curses&quot; module, some tiles &quot;curse&quot; players by forcing them to place one hand on their head, keep mute during play, or otherwise do what you wouldn't want to do while escaping a temple!\\n\\n\",\n          \"Verdant is a puzzly spatial card game for 1 to 5 players. You take on the role of a houseplant enthusiast trying to create the coziest interior space by collecting and arranging houseplants and other objects within your home. You must position your plants so that they are provided the most suitable light conditions and take care of them to create the most verdant collection.\\n\\nEach turn, you select an adjacent pair of a card and token, then use those items to build an ever-expanding tableau of cards that represents your home. You need to keep various objectives in mind as you attempt to increase plant verdancy by making spatial matches and using item tokens to take various nurture actions. You can also build your &quot;green thumb&quot; skills, which allows you to take additional actions to care for your plants and create the coziest space!\\n\\n&mdash;description from the designer\\n\\n\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yearpublished\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135,\n        \"min\": -2200,\n        \"max\": 2024,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          2006,\n          1985,\n          1800\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minplayers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"maxplayers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 1,\n        \"max\": 100,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          4,\n          6,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minplaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 0,\n        \"max\": 480,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          100,\n          480,\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"maxplaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83,\n        \"min\": 0,\n        \"max\": 1200,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          210,\n          1000,\n          360\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 18,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          7,\n          16,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgweight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.819374649364368,\n        \"min\": 1.0,\n        \"max\": 4.8182,\n        \"num_unique_values\": 981,\n        \"samples\": [\n          2.3966,\n          2.9957,\n          2.6188\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"best_num_players\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 40,\n        \"samples\": [\n          \"[{'min': 8, 'max': 8}]\",\n          \"[{'min': 9, 'max': 12}]\",\n          \"[{'min': 6, 'max': 7}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"designers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 603,\n        \"samples\": [\n          \"['Inka Brand', 'Markus Brand']\",\n          \"['Jeremy Stoltzfus']\",\n          \"['Ed Marriott']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mechanics\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 950,\n        \"samples\": [\n          \"['Hand Management', 'Layering', 'Open Drafting', 'Set Collection', 'Solo / Solitaire Game', 'Worker Placement, Different Worker Types']\",\n          \"['Dice Rolling', 'Hand Management', 'Modular Board', 'Roll / Spin and Move', 'Scenario / Mission / Campaign Game', 'Team-Based Game']\",\n          \"['Cooperative Game', 'Dice Rolling', 'Die Icon Resolution', 'Modular Board', 'Re-rolling and Locking', 'Solo / Solitaire Game']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"categories\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 697,\n        \"samples\": [\n          \"['Card Game', 'Fantasy', 'Fighting', 'Horror', 'Novel-based']\",\n          \"['Transportation']\",\n          \"['City Building', 'Environmental']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ],
      "source": [
        "df_juegos = pd.read_csv('bgg_database.csv')\n",
        "df_juegos.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ysmqTSb6DoSF"
      },
      "outputs": [],
      "source": [
        "df_juegos = df_juegos.rename(columns={'game_name': 'name'})\n",
        "df_juegos = df_juegos.rename(columns={'game_href': 'link'})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qv6zgUiTkrSX"
      },
      "source": [
        "## Películas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X8FQTgY7jx4_",
        "outputId": "6676f402-890e-4a1e-af48-a2907bc2fe3f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1NoEtyFXuCN72QSIxR8amIcrH3X4NKy3h\n",
            "To: /content/IMDB-Movie-Data.csv\n",
            "\r  0% 0.00/309k [00:00<?, ?B/s]\r100% 309k/309k [00:00<00:00, 88.7MB/s]\n"
          ]
        }
      ],
      "source": [
        "!gdown \"1NoEtyFXuCN72QSIxR8amIcrH3X4NKy3h\" --output \"IMDB-Movie-Data.csv\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fmO7YKU5kTAE",
        "outputId": "3b739e87-473a-4f9c-db3c-ec9d03ffc369"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Rank                    Title                     Genre  \\\n",
              "0     1  Guardians of the Galaxy   Action,Adventure,Sci-Fi   \n",
              "1     2               Prometheus  Adventure,Mystery,Sci-Fi   \n",
              "2     3                    Split           Horror,Thriller   \n",
              "3     4                     Sing   Animation,Comedy,Family   \n",
              "4     5            Suicide Squad  Action,Adventure,Fantasy   \n",
              "\n",
              "                                         Description              Director  \\\n",
              "0  A group of intergalactic criminals are forced ...            James Gunn   \n",
              "1  Following clues to the origin of mankind, a te...          Ridley Scott   \n",
              "2  Three girls are kidnapped by a man with a diag...    M. Night Shyamalan   \n",
              "3  In a city of humanoid animals, a hustling thea...  Christophe Lourdelet   \n",
              "4  A secret government agency recruits some of th...            David Ayer   \n",
              "\n",
              "                                              Actors  Year  Runtime (Minutes)  \\\n",
              "0  Chris Pratt, Vin Diesel, Bradley Cooper, Zoe S...  2014                121   \n",
              "1  Noomi Rapace, Logan Marshall-Green, Michael Fa...  2012                124   \n",
              "2  James McAvoy, Anya Taylor-Joy, Haley Lu Richar...  2016                117   \n",
              "3  Matthew McConaughey,Reese Witherspoon, Seth Ma...  2016                108   \n",
              "4  Will Smith, Jared Leto, Margot Robbie, Viola D...  2016                123   \n",
              "\n",
              "   Rating   Votes  Revenue (Millions)  Metascore  \n",
              "0     8.1  757074              333.13         76  \n",
              "1     7.0  485820              126.46         65  \n",
              "2     7.3  157606              138.12         62  \n",
              "3     7.2   60545              270.32         59  \n",
              "4     6.2  393727              325.02         40  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e24d20f3-5f0f-4268-aa6d-2928bb908b57\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rank</th>\n",
              "      <th>Title</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Description</th>\n",
              "      <th>Director</th>\n",
              "      <th>Actors</th>\n",
              "      <th>Year</th>\n",
              "      <th>Runtime (Minutes)</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Votes</th>\n",
              "      <th>Revenue (Millions)</th>\n",
              "      <th>Metascore</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Guardians of the Galaxy</td>\n",
              "      <td>Action,Adventure,Sci-Fi</td>\n",
              "      <td>A group of intergalactic criminals are forced ...</td>\n",
              "      <td>James Gunn</td>\n",
              "      <td>Chris Pratt, Vin Diesel, Bradley Cooper, Zoe S...</td>\n",
              "      <td>2014</td>\n",
              "      <td>121</td>\n",
              "      <td>8.1</td>\n",
              "      <td>757074</td>\n",
              "      <td>333.13</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Prometheus</td>\n",
              "      <td>Adventure,Mystery,Sci-Fi</td>\n",
              "      <td>Following clues to the origin of mankind, a te...</td>\n",
              "      <td>Ridley Scott</td>\n",
              "      <td>Noomi Rapace, Logan Marshall-Green, Michael Fa...</td>\n",
              "      <td>2012</td>\n",
              "      <td>124</td>\n",
              "      <td>7.0</td>\n",
              "      <td>485820</td>\n",
              "      <td>126.46</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Split</td>\n",
              "      <td>Horror,Thriller</td>\n",
              "      <td>Three girls are kidnapped by a man with a diag...</td>\n",
              "      <td>M. Night Shyamalan</td>\n",
              "      <td>James McAvoy, Anya Taylor-Joy, Haley Lu Richar...</td>\n",
              "      <td>2016</td>\n",
              "      <td>117</td>\n",
              "      <td>7.3</td>\n",
              "      <td>157606</td>\n",
              "      <td>138.12</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Sing</td>\n",
              "      <td>Animation,Comedy,Family</td>\n",
              "      <td>In a city of humanoid animals, a hustling thea...</td>\n",
              "      <td>Christophe Lourdelet</td>\n",
              "      <td>Matthew McConaughey,Reese Witherspoon, Seth Ma...</td>\n",
              "      <td>2016</td>\n",
              "      <td>108</td>\n",
              "      <td>7.2</td>\n",
              "      <td>60545</td>\n",
              "      <td>270.32</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Suicide Squad</td>\n",
              "      <td>Action,Adventure,Fantasy</td>\n",
              "      <td>A secret government agency recruits some of th...</td>\n",
              "      <td>David Ayer</td>\n",
              "      <td>Will Smith, Jared Leto, Margot Robbie, Viola D...</td>\n",
              "      <td>2016</td>\n",
              "      <td>123</td>\n",
              "      <td>6.2</td>\n",
              "      <td>393727</td>\n",
              "      <td>325.02</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e24d20f3-5f0f-4268-aa6d-2928bb908b57')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e24d20f3-5f0f-4268-aa6d-2928bb908b57 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e24d20f3-5f0f-4268-aa6d-2928bb908b57');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6652387-e300-460a-84a0-3950126b8a41\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6652387-e300-460a-84a0-3950126b8a41')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6652387-e300-460a-84a0-3950126b8a41 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pelis",
              "summary": "{\n  \"name\": \"df_pelis\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 1,\n        \"max\": 1000,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          522,\n          738,\n          741\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 999,\n        \"samples\": [\n          \"Olympus Has Fallen\",\n          \"Man on a Ledge\",\n          \"The Girl with All the Gifts\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Genre\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 207,\n        \"samples\": [\n          \"Mystery,Romance,Sci-Fi\",\n          \"Drama,Mystery,Sci-Fi\",\n          \"Drama,Mystery,Romance\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          \"A lawyer finds himself in over his head when he gets involved in drug trafficking.\",\n          \"A CIA agent on the ground in Jordan hunts down a powerful terrorist leader while being caught between the unclear intentions of his American supervisors and Jordan Intelligence.\",\n          \"A titan of industry is sent to prison after she's caught insider trading. When she emerges ready to rebrand herself as America's latest sweetheart, not everyone she screwed over is so quick to forgive and forget.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 644,\n        \"samples\": [\n          \"Patricia Riggen\",\n          \"Gregory Wilson\",\n          \"Chris McCoy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Actors\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 996,\n        \"samples\": [\n          \"Adrian Titieni, Maria-Victoria Dragus, Lia Bugnar,Malina Manovici\",\n          \"Madina Nalwanga, David Oyelowo, Lupita Nyong'o, Martin Kabanza\",\n          \"Ry\\u00fbnosuke Kamiki, Mone Kamishiraishi, Ry\\u00f4 Narita, Aoi Yuki\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2006,\n        \"max\": 2016,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          2011,\n          2014,\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Runtime (Minutes)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18,\n        \"min\": 66,\n        \"max\": 191,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          106,\n          99,\n          146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9454287892779637,\n        \"min\": 1.9,\n        \"max\": 9.0,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          7.4,\n          6.1,\n          4.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 188762,\n        \"min\": 61,\n        \"max\": 1791916,\n        \"num_unique_values\": 997,\n        \"samples\": [\n          214994,\n          4370,\n          23713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Revenue (Millions)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 100.32031435113176,\n        \"min\": 0.0,\n        \"max\": 936.63,\n        \"num_unique_values\": 814,\n        \"samples\": [\n          89.02,\n          23.23,\n          202.85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Metascore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 11,\n        \"max\": 100,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          22,\n          76,\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "df_pelis = pd.read_csv('IMDB-Movie-Data.csv')\n",
        "df_pelis.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KUp4PE6mqZm_"
      },
      "outputs": [],
      "source": [
        "df_pelis = df_pelis.rename(columns={'Title': 'name'})\n",
        "df_pelis = df_pelis.rename(columns={'Description': 'description'})\n",
        "df_pelis = df_pelis.rename(columns={'Director': 'director/author'})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uik5i9gnktZH"
      },
      "source": [
        "## Libros"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jLEcuxa7g4z2"
      },
      "outputs": [],
      "source": [
        "url = \"https://www.gutenberg.org/browse/scores/top1000.php#books-last1\"\n",
        "response = requests.get(url)\n",
        "soup = BeautifulSoup(response.text, 'html.parser')\n",
        "\n",
        "books = []\n",
        "contador = 0  # Inicializa el contador en 0\n",
        "\n",
        "for indice, item_libro in enumerate(soup.find_all('li')):\n",
        "  enlace_libro = item_libro.find('a')\n",
        "\n",
        "  # Filtra solo enlaces que contengan \"/ebooks/\" seguido de un número\n",
        "  if enlace_libro and re.search(r'/ebooks/\\d+$', enlace_libro['href']):\n",
        "    # Extraer el título y el autor del texto completo en el enlace\n",
        "    texto_completo = enlace_libro.text.strip()\n",
        "\n",
        "    # Dividir el texto en título y autor\n",
        "    if \" de \" in texto_completo:\n",
        "      titulo, autor = texto_completo.split(\" de \", 1)\n",
        "    elif \" by \" in texto_completo:\n",
        "      titulo, autor = texto_completo.split(\" by \", 1)\n",
        "    else:\n",
        "      titulo = texto_completo\n",
        "      autor = \"Desconocido\"\n",
        "\n",
        "    # Limpiar los textos de paréntesis y espacios adicionales\n",
        "    titulo = titulo.strip()\n",
        "    autor = autor.split(\"(\")[0].strip()  # Quitar cualquier número entre paréntesis\n",
        "\n",
        "    link = 'https://www.gutenberg.org' + enlace_libro['href']\n",
        "\n",
        "    # Obtener el género y la descripción del libro desde su página individual\n",
        "    genero = \"Desconocido\"\n",
        "    descripcion = \"Desconocida\"\n",
        "    book_response = requests.get(link)\n",
        "    book_soup = BeautifulSoup(book_response.text, 'html.parser')\n",
        "\n",
        "    # Buscar el género en la página individual\n",
        "    subject_section = book_soup.find('th', string=re.compile(\"Subject|Categorías\", re.IGNORECASE))\n",
        "    if subject_section:\n",
        "      generos = subject_section.find_next('td').find_all('a')\n",
        "      genero = ', '.join([g.text for g in generos])\n",
        "\n",
        "    # Buscar la descripción del libro\n",
        "    seccion_descripcion = book_soup.find('th', string=re.compile(\"Summary\", re.IGNORECASE))\n",
        "    if seccion_descripcion:\n",
        "      descripcion = seccion_descripcion.find_next('td').text.strip()  # Directamente desde el <td>\n",
        "\n",
        "    # Si no se encontró la descripción, intentar en un bloque de descripción general\n",
        "    if descripcion == \"Desconocida\":\n",
        "      descripcion_general = book_soup.find('blockquote')\n",
        "      if descripcion_general:\n",
        "        descripcion = descripcion_general.text.strip()\n",
        "\n",
        "    # Agregar al diccionario de libros\n",
        "    books.append({\n",
        "      'title': titulo,\n",
        "      'author': autor,\n",
        "      'link': link,\n",
        "      'genre': genero,\n",
        "      'description': descripcion\n",
        "    })\n",
        "\n",
        "    contador += 1  # Incrementa el contador\n",
        "    if contador >= 50:  # Verifica si se alcanzó el máximo de libros\n",
        "      break  # Detiene el bucle si ya se alcanzó el máximo de libros\n",
        "\n",
        "    # Pausa para evitar sobrecargar el servidor con solicitudes rápidas\n",
        "    time.sleep(0.01)\n",
        "\n",
        "# Crear el DataFrame y guardar en CSV\n",
        "df = pd.DataFrame(books)\n",
        "df.to_csv('gutenberg_books.csv', index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "HtdjaU5Gg8l3",
        "outputId": "869c1dfb-f043-42db-d8b3-71a4872f869f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     title                       author  \\\n",
              "0  Frankenstein; Or, The Modern Prometheus  Mary Wollstonecraft Shelley   \n",
              "1                                      呻吟語                       Kun Lü   \n",
              "2                      Pride and Prejudice                  Jane Austen   \n",
              "3                 Moby Dick; Or, The Whale              Herman Melville   \n",
              "4                         Romeo and Juliet          William Shakespeare   \n",
              "\n",
              "                                     link                   genre  \\\n",
              "0     https://www.gutenberg.org/ebooks/84     \\nScience fiction\\n   \n",
              "1  https://www.gutenberg.org/ebooks/25558     \\nConduct of life\\n   \n",
              "2   https://www.gutenberg.org/ebooks/1342  \\nEngland -- Fiction\\n   \n",
              "3   https://www.gutenberg.org/ebooks/2701  \\nWhaling -- Fiction\\n   \n",
              "4   https://www.gutenberg.org/ebooks/1513   \\nVendetta -- Drama\\n   \n",
              "\n",
              "                                         description  \n",
              "0  \"Frankenstein; Or, The Modern Prometheus\" by M...  \n",
              "1  \"呻吟語\" by Kun Lü is a philosophical treatise wr...  \n",
              "2  \"Pride and Prejudice\" by Jane Austen is a clas...  \n",
              "3  \"Moby Dick; Or, The Whale\" by Herman Melville ...  \n",
              "4  \"Romeo and Juliet\" by William Shakespeare is a...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88e401aa-9cfa-4315-b5b3-5133be4dad0d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>author</th>\n",
              "      <th>link</th>\n",
              "      <th>genre</th>\n",
              "      <th>description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Frankenstein; Or, The Modern Prometheus</td>\n",
              "      <td>Mary Wollstonecraft Shelley</td>\n",
              "      <td>https://www.gutenberg.org/ebooks/84</td>\n",
              "      <td>\\nScience fiction\\n</td>\n",
              "      <td>\"Frankenstein; Or, The Modern Prometheus\" by M...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>呻吟語</td>\n",
              "      <td>Kun Lü</td>\n",
              "      <td>https://www.gutenberg.org/ebooks/25558</td>\n",
              "      <td>\\nConduct of life\\n</td>\n",
              "      <td>\"呻吟語\" by Kun Lü is a philosophical treatise wr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Pride and Prejudice</td>\n",
              "      <td>Jane Austen</td>\n",
              "      <td>https://www.gutenberg.org/ebooks/1342</td>\n",
              "      <td>\\nEngland -- Fiction\\n</td>\n",
              "      <td>\"Pride and Prejudice\" by Jane Austen is a clas...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Moby Dick; Or, The Whale</td>\n",
              "      <td>Herman Melville</td>\n",
              "      <td>https://www.gutenberg.org/ebooks/2701</td>\n",
              "      <td>\\nWhaling -- Fiction\\n</td>\n",
              "      <td>\"Moby Dick; Or, The Whale\" by Herman Melville ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Romeo and Juliet</td>\n",
              "      <td>William Shakespeare</td>\n",
              "      <td>https://www.gutenberg.org/ebooks/1513</td>\n",
              "      <td>\\nVendetta -- Drama\\n</td>\n",
              "      <td>\"Romeo and Juliet\" by William Shakespeare is a...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88e401aa-9cfa-4315-b5b3-5133be4dad0d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88e401aa-9cfa-4315-b5b3-5133be4dad0d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88e401aa-9cfa-4315-b5b3-5133be4dad0d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a5bb9804-f1b8-4432-a6b8-31481a8fa17d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5bb9804-f1b8-4432-a6b8-31481a8fa17d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a5bb9804-f1b8-4432-a6b8-31481a8fa17d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_libros",
              "summary": "{\n  \"name\": \"df_libros\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"The Scarlet Letter\",\n          \"The Prince\",\n          \"The Yellow Wallpaper\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"author\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 42,\n        \"samples\": [\n          \"Robert Louis Stevenson\",\n          \"T.  Smollett\",\n          \"Lewis Carroll\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"https://www.gutenberg.org/ebooks/25344\",\n          \"https://www.gutenberg.org/ebooks/1232\",\n          \"https://www.gutenberg.org/ebooks/1952\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genre\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 37,\n        \"samples\": [\n          \"\\nFrance -- History -- Louis XIV, 1643-1715 -- Fiction\\n\",\n          \"\\nGothic fiction\\n\",\n          \"\\nVendetta -- Drama\\n\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 48,\n        \"samples\": [\n          \"\\\"The Legend of Sleepy Hollow\\\" by Washington Irving is a classic short story from the early 19th century, specifically during the Romantic era. This tale is a blend of folklore and ghost story that takes place in the mythical village of Sleepy Hollow, where supernatural occurrences and local legends intertwine within a vividly described rural setting. The narrative centers on themes of love, rivalry, and the collision of rational thought with superstition.  The story primarily follows Ichabod Crane, a lanky schoolteacher who arrives in Sleepy Hollow to woo the beautiful Katrina Van Tassel, daughter of a wealthy farmer. However, he is met with competition from the burly Brom Bones, who is equally determined to win her affections. As Ichabod navigates his way through local superstitions and his own fear of the supernatural, he ultimately encounters the infamous Headless Horseman during a fateful ride home. The story culminates in a climactic chase that leads to Ichabod's mysterious disappearance. Through entertaining characters and a blend of humor and horror, Irving crafts a story that remains a beloved part of American literature, exploring themes of ambition, jealousy, and the power of legend. (This is an automatically generated summary.)\",\n          \"\\\"Leviathan\\\" by Thomas Hobbes is a philosophical treatise written in the mid-17th century. The book explores the structure of society and legitimate government and creates an objective science of morality. Hobbes argues for a strong central authority to avoid chaos and civil war, emphasizing the social contract and the necessity of a sovereign power to maintain order and protect citizens.  The opening of \\\"Leviathan\\\" sets the stage for Hobbes' exploration of human nature and the foundations of society. He begins by discussing the concept of an artificial man, the Common-wealth, likening it to a great Leviathan created through social contracts among individuals. Hobbes emphasizes the importance of understanding human desires, fears, and the underlying motivations that drive individuals to form societies, laying the foundation for his arguments about governance, civil order, and the relationship between individuals and authority. Through a direct and analytical style, Hobbes invites readers to reflect on the complexities of human motivations and their impact on societal structures. (This is an automatically generated summary.)\",\n          \"\\\"The Great Gatsby\\\" by F. Scott Fitzgerald is a novel written in the early 20th century. The story is mainly narrated by Nick Carraway, who reflects on the life of his enigmatic neighbor, Jay Gatsby, and the extravagant world of wealth and excess he inhabits. The novel explores themes of the American Dream, love, and social class.  At the start of the novel, Nick Carraway reflects on advice from his father about withholding judgment of others, which sets the stage for the unfolding narrative. We learn about Nick's background, his move to West Egg, and his connection to wealthy acquaintances like Tom and Daisy Buchanan. Nick's first glimpse of Gatsby is during a moment of solitude when he sees Gatsby reaching out toward a distant green light, symbolizing his unattainable dreams. This opening portion lays the groundwork for the intricate relationships and social dynamics in the world of 1920s America, hinting at the luxurious yet hollow lives that many characters lead. (This is an automatically generated summary.)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "df_libros = pd.read_csv('gutenberg_books.csv')\n",
        "df_libros.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tTsozfg7hAdH"
      },
      "outputs": [],
      "source": [
        "df_libros['genre'] = df_libros['genre'].str.replace(r'\\n', '', regex=True).str.strip()\n",
        "df_libros = df_libros.rename(columns={'title': 'name'})\n",
        "df_libros = df_libros.rename(columns={'author': 'director/author'})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hvwsvohx3thF"
      },
      "source": [
        "# Clasificador"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En base al sentimiento ingresado por el usuario, lo categoriza en un rango de 1 a 5 para definir si su estado es 'alegre', 'melancólico' o 'ni fu ni fa'."
      ],
      "metadata": {
        "id": "ucxT3-3_87Tj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Cargamos el tokenizador y el modelo\n",
        "model_name = \"nlptown/bert-base-multilingual-uncased-sentiment\"\n",
        "tokenizador_sentimiento = BertTokenizer.from_pretrained(model_name)\n",
        "modelo_sentimiento = BertForSequenceClassification.from_pretrained(model_name)"
      ],
      "metadata": {
        "id": "XLtcDjMM6VKs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304,
          "referenced_widgets": [
            "d56b691d9fff4aa19f21609ad71a3f48",
            "ef56145106f541a38c9d7af3bbe8dfda",
            "ca1507a69aa04dceb62310d23fcb53bc",
            "43c474636dbf46eab4869ba727e2db13",
            "7f5931f92adb460299047322e6a5038c",
            "ab408c190b3d46f39e17589a269717d2",
            "68e9156f0bcd4200bd28869ded29d043",
            "b8a33435173c49a5a02e19f92400fef6",
            "64de6b2833244bafb8cb06e1a9350d90",
            "34ede7f16642430a802079edecd81b9f",
            "99b9b4cee7d74896b9823e200606a892",
            "8ced274322cc408c9e5427d73f84cca7",
            "d76563d41c71426e92ccfe5293347c53",
            "6b1548efe10648b9a2e11643487fc422",
            "ee51d09295a247dca003afab2a5c5d9e",
            "283a197213e64474acdd958a243037bd",
            "948fdf8faf614a6496836fffa2608972",
            "e87cb28e888f4021a5ef2e8f19ad7a17",
            "9d703a86fe2c4ab9b97cb84c42713b73",
            "2b90b5eeaa2242a8a90c9a08346370a3",
            "87a3142b3e7742b18798978bd91f738e",
            "a3b072bb5596468ca5dfc0f821b0144f",
            "c2d839af69814bd9b3af8e69fc35bab5",
            "af030c35d44d436aac80cfca522572d0",
            "4f6d0ee4635640bd970834d957649004",
            "1eab6bf144d542e2a920ef34f74f1d66",
            "ca4cc603a08b4b81ae269352ceace7ad",
            "3f7d083f162a496e9c4f473554c22b6a",
            "cd347f68c9524ef094605f78ebc9f53d",
            "a5e493c409924074a5ea7cd1c1fabaa5",
            "63a5ba938b834c4ab4ca7c3787c33dc9",
            "ce01342e7dc3433dafe3eaff8b448154",
            "56388261ca724c6b9de8f56857533bb4",
            "947d55a122fe4061ae63eeafa024d127",
            "9847fa1728d64db28420fea9798a516a",
            "6eb0c530caac44299702ec09594fa477",
            "e1cd45df7dc54f6387448422b95e7fe9",
            "9cce4f8dafa24de2acccb46c148c0f68",
            "ad431f59a02c4ecdafeac8f6844f33ff",
            "c04b3d6d7eff4134b56987cc4ffbc972",
            "e5c3f5caf1b8466e8f780d84b14830cb",
            "f20b638e09ae43ecb95f532f4a342bf8",
            "c14f68c3a0d148bfbc729ee6765e5f47",
            "9b3c2bd9d35640eb86884da6b5ba34ae",
            "e85f017889744e00ab6bd9d137b32681",
            "1a45a7182dfa416ea6a2d535cddef270",
            "97192d810cc149f188649195edc5e663",
            "630c189ecd1944118c9902bb84626e49",
            "f51e16f442674ecbb85e0e8cf107df7a",
            "4d6eb24963d44670b8bf12275909e148",
            "4473d6a1db4d441085dfd07d0e7e964b",
            "e419eaf0aaee460d8c099c1d5718081a",
            "8dd1b97811094a7ea80c8d7b50a2d54d",
            "d307f82623524158bf9c8c3d273fe653",
            "42bb5559d5db436181856134c927c571"
          ]
        },
        "outputId": "283c5ac6-7131-4343-c988-58718f73fcf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:89: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/39.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d56b691d9fff4aa19f21609ad71a3f48"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.txt:   0%|          | 0.00/872k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8ced274322cc408c9e5427d73f84cca7"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c2d839af69814bd9b3af8e69fc35bab5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/953 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "947d55a122fe4061ae63eeafa024d127"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "pytorch_model.bin:   0%|          | 0.00/669M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "e85f017889744e00ab6bd9d137b32681"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NI2rpNt2cwSB"
      },
      "outputs": [],
      "source": [
        "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
        "\n",
        "def analizar_sentimiento_usuario(frase_usuario):\n",
        "  # Creamos un pipeline de clasificación\n",
        "  nlp = pipeline(\"sentiment-analysis\", model=modelo_sentimiento, tokenizer=tokenizador_sentimiento)\n",
        "\n",
        "  # Obtener el resultado del análisis de sentimiento\n",
        "  resultado_sentimiento = nlp(frase_usuario)\n",
        "\n",
        "  # Extraer el número de estrellas de la etiqueta\n",
        "  label = resultado_sentimiento[0]['label']\n",
        "  score = resultado_sentimiento[0]['score']\n",
        "  nro_estrellas = int(label.split()[0])\n",
        "\n",
        "  print(f\"Frase del usuario: '{frase_usuario}'\")\n",
        "  print(f\"  Sentimiento: {label}, Score: {score:.3f}\")\n",
        "\n",
        "  return nro_estrellas\n",
        "\n",
        "def determinar_estado_animo(nro_estrellas):\n",
        "  if nro_estrellas < 3:\n",
        "    return \"Estado de ánimo del usuario: Melancólico\"\n",
        "  elif nro_estrellas == 5:\n",
        "    return \"Estado de ánimo del usuario: Alegre\"\n",
        "  else:\n",
        "    return \"Estado de ánimo del usuario: Ni fu ni fa\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lUFe4K1wjWQ-"
      },
      "source": [
        "# Parseo de texto"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xq1mQG7Bt9qQ"
      },
      "source": [
        "En base a la descripción del libro, película o juego, parsea el texto (pasa todo a minúscula, se queda con las palabras claves, saca signos de puntuación)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OqPyw3jXzqLi"
      },
      "outputs": [],
      "source": [
        "# Cargar modelo de lenguaje y stopwords una sola vez\n",
        "nlp = spacy.load(\"en_core_web_md\")\n",
        "stopwords_en = nlp.Defaults.stop_words"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from gliner import GLiNER\n",
        "\n",
        "# Cargar el modelo GLiNER una vez\n",
        "model = GLiNER.from_pretrained(\"urchade/gliner_multi-v2.1\")\n",
        "model.eval()\n",
        "\n",
        "def obtener_entidades(texto):\n",
        "    # Extraer entidades de cada descripción con GLiNER\n",
        "    labels = [\n",
        "    \"person\",        # Personas\n",
        "    \"book\",          # Libros\n",
        "    \"location\",      # Ubicaciones\n",
        "    \"date\",          # Fechas\n",
        "    \"actor\",         # Actores\n",
        "    \"character\",     # Personajes\n",
        "    \"organization\",  # Organizaciones\n",
        "    \"event\",         # Eventos\n",
        "    \"product\",       # Productos\n",
        "    \"facility\",      # Instalaciones\n",
        "    \"artwork\",       # Obras de arte\n",
        "    \"language\"       # Idiomas\n",
        "            ]     # Ajusta según tus necesidades\n",
        "\n",
        "    entities = model.predict_entities(texto, labels, threshold=0.4)  # Establece un umbral adecuado\n",
        "    return [(entity[\"text\"], entity[\"label\"]) for entity in entities]\n",
        "\n",
        "def procesar_descripciones_con_ner(data, columna_descripcion):\n",
        "    # Limpiar texto en cada descripción y aplicar NER para identificar entidades relevantes\n",
        "    data['Description_entities'] = data[columna_descripcion].apply(obtener_entidades)\n",
        "\n",
        "    return data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "utsmDgvKVkko",
        "outputId": "1faf3216-b4eb-4dbe-9547-d99027b0dbb4",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "OSError",
          "evalue": "[E050] Can't find model 'es_core_news_sm'. It doesn't seem to be a Python package or a valid path to a data directory.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-58-66e918159854>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Cargar el modelo de spaCy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mnlp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"es_core_news_sm\"\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Asegúrate de tener el modelo en español\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;31m# Cargar el modelo GLiNER\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGLiNER\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_pretrained\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"urchade/gliner_multi-v2.1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spacy/__init__.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(name, vocab, disable, enable, exclude, config)\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0mRETURNS\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mLanguage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mThe\u001b[0m \u001b[0mloaded\u001b[0m \u001b[0mnlp\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m     \"\"\"\n\u001b[0;32m---> 51\u001b[0;31m     return util.load_model(\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m         \u001b[0mvocab\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvocab\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spacy/util.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(name, vocab, disable, enable, exclude, config)\u001b[0m\n\u001b[1;32m    470\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mOLD_MODEL_SHORTCUTS\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    471\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mIOError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mErrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mE941\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfull\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mOLD_MODEL_SHORTCUTS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[index]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mIOError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mErrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mE050\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mOSError\u001b[0m: [E050] Can't find model 'es_core_news_sm'. It doesn't seem to be a Python package or a valid path to a data directory."
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "procesar_descripciones_con_ner aplica la limpieza de texto en cada descripción y usa la función obtener_entidades para extraer entidades usando NER.\n",
        "\n",
        "obtener_entidades procesa cada texto con spaCy, extrayendo las entidades y sus etiquetas.\n",
        "\n",
        "Al final, Description_entities contendrá una lista de las entidades extraídas para cada descripción."
      ],
      "metadata": {
        "id": "dRMQb85DOvbW"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rIL7GQnA0Hxq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a8b1594-7dae-40fb-82b2-95fc626a983c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\n"
          ]
        }
      ],
      "source": [
        "# Aplicación a los DataFrames\n",
        "\"\"\"df_pelis = procesar_descripciones_con_ner(df_pelis, 'description')\n",
        "df_juegos = procesar_descripciones_con_ner(df_juegos, 'description')\"\"\"\n",
        "df_libros = procesar_descripciones_con_ner(df_libros, 'description')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_libros['Description_entities'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "GO6PSa31geoQ",
        "outputId": "a644a02e-4eb9-4840-bf57-9c5456057d4f",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Description_entities\n",
              "[]                                                                                                                                                                                                                                                                                                                                                                                                                                      3\n",
              "[(Frankenstein; Or, The Modern Prometheus, book), (early 19th century, date), (Victor Frankenstein, character), (Robert Walton, character), (Arctic, location), (Margaret, person)]                                                                                                                                                                                                                                                     1\n",
              "[(呻吟語, book), (Kun Lü, person), (late 16th century, date), (呻吟語, book), (author, person), (author, person)]                                                                                                                                                                                                                                                                                                                             1\n",
              "[(The Great Gatsby, book), (Nick Carraway, character), (Jay Gatsby, character), (Nick Carraway, character), (West Egg, location), (Daisy Buchanan, character), (Gatsby, character)]                                                                                                                                                                                                                                                     1\n",
              "[(Sleepy Hollow, location), (Washington Irving, person), (Sleepy Hollow, location), (Ichabod Crane, character), (Sleepy Hollow, location), (Katrina Van Tassel, character), (Brom Bones, character), (Headless Horseman, character)]                                                                                                                                                                                                    1\n",
              "[(Huckleberry Finn, character), (late 19th century, date), (Huckleberry Finn, character), (American South, location), (Mississippi River, location), (Huck Finn, character), (Tom Sawyer, character), (Widow Douglas, person), (Jim, character)]                                                                                                                                                                                        1\n",
              "[(Mr. Hyde, character), (Robert Louis Stevenson, person), (Mr. Utterson, person), (Dr. Jekyll, person), (Mr. Hyde, character), (Mr. Utterson, person), (Mr. Enfield, person), (Hyde, character), (Hyde, character), (Hyde, character), (Jekyll, person), (Jekyll, person), (Hyde, character)]                                                                                                                                           1\n",
              "[(The Yellow Wallpaper, artwork), (late 19th century, date), (woman, character), (room, location), (woman, character), (secluded mansion, location), (nursery, location), (room, location), (yellow wallpaper, artwork), (woman, character), (dramatic climax, event)]                                                                                                                                                                  1\n",
              "[(Christmas, event), (early 19th century, date), (Ebenezer Scrooge, character), (Jacob Marley, actor), (Christmas, event), (Christmas, event), (Christmas, event), (Scrooge, character)]                                                                                                                                                                                                                                                1\n",
              "[(French Revolution, event), (Mr. Jarvis Lorry, character), (Dr. Alexandre Manette, character), (England, location), (France, location), (Mr. Lorry, character), (Dover, location), (Dr. Manette, character), (Mr. Lorry, character), (Paris, location), (Revolution, event)]                                                                                                                                                           1\n",
              "[(Zarathustra, character), (Friedrich Wilhelm Nietzsche, person), (late 19th century, date), (Zarathustra, character), (Superman, character), (Zarathustra, person), (Zarathustra, person), (Zarathustra, person), (Superman, character)]                                                                                                                                                                                               1\n",
              "[(The Brothers Karamazov, book), (Fyodor Dostoyevsky, person), (late 19th century, date), (Dmitri, character), (Ivan, character), (Alyosha, character), (Fyodor Pavlovitch, person), (Fyodor Pavlovitch Karamazov, character), (Dmitri, character), (Ivan, character), (Alyosha, character), (dramatic events, event)]                                                                                                                  1\n",
              "[(Great Expectations, book), (Pip, character), (Pip, character), (fateful encounter, event), (convict, character), (Pip, character), (churchyard, location), (terrifying confrontation, event), (convict, character), (Pip, character), (Pip, character), (convict, character), (Pip, character), (convict, character)]                                                                                                                 1\n",
              "[(Napoleonic Wars, event), (Anna Pavlovna, person), (Prince Vasili Kuragin, character), (Anna Pavlovna, person), (July 1805, date), (Petersburg society, organization), (Prince Vasili, person)]                                                                                                                                                                                                                                        1\n",
              "[(Crime and Punishment, book), (mid-19th century, date), (Rodion Raskolnikov, character), (St. Petersburg, location), (Raskolnikov, character), (July evening, date), (Raskolnikov, character)]                                                                                                                                                                                                                                         1\n",
              "[(The Prince, book), (Niccolò Machiavelli, person), (early 16th century, date), (Machiavelli, person), (The Prince, book), (Machiavelli, person), (Machiavelli, person)]                                                                                                                                                                                                                                                                1\n",
              "[(Leviathan, book), (Thomas Hobbes, person), (mid-17th century, date), (Hobbes, person), (Leviathan, book), (Hobbes, person), (Leviathan, book), (Hobbes, person), (Hobbes, person)]                                                                                                                                                                                                                                                    1\n",
              "[(Jane Eyre, character), (Charlotte Brontë, person), (Jane Eyre, character), (Jane Eyre, character), (Gateshead Hall, location), (John Reed, person), (Jane, character), (red-room, location), (Jane, character)]                                                                                                                                                                                                                       1\n",
              "[(Sherlock Holmes, character), (Sherlock Holmes, character), (Dr. John Watson, person), (Irene Adler, character), (Bohemia, location), (Holmes, character)]                                                                                                                                                                                                                                                                             1\n",
              "[(The Souls of Black Folk, book), (W. E. B. Du Bois, person), (United States, location), (Du Bois, person), (Du Bois, person), (Emancipation, event), (Du Bois, person)]                                                                                                                                                                                                                                                                1\n",
              "[(Ulysses, book), (Dublin, location), (Leopold Bloom, character), (Stephen Dedalus, character), (Molly Bloom, character), (June 16, 1904, date), (Ulysses, book), (Buck Mulligan, character), (Stephen Dedalus, character), (Martello tower, location), (Dublin, location), (Buck Mulligan, character)]                                                                                                                                 1\n",
              "[(Don Quijote, book), (early 17th century, date), (Don Quijote, character), (Sancho Panza, person), (Don Quijote, book), (Don Quijote, character)]                                                                                                                                                                                                                                                                                      1\n",
              "[(The Count of Monte Cristo, book), (Edmond Dantès, character), (Marseilles, location), (Edmond Dantès, character), (Marseilles, location), (Pharaon, book), (Danglars, book), (Fernand, character), (Mercédès, character), (Danglars, book)]                                                                                                                                                                                           1\n",
              "[(late 19th century, date), (John Worthing, character), (Algernon Moncrieff, character), (Algernon Moncrieff, character), (Lane, character), (John Worthing, character), (Gwendolen Fairfax, character), (Cecily Cardew, person)]                                                                                                                                                                                                       1\n",
              "[(Jonathan Swift, person), (early 18th century, date), (Ireland, location), (Swift, person), (British government, organization), (Swift, person)]                                                                                                                                                                                                                                                                                       1\n",
              "[(Dracula, character), (Bram Stoker, person), (late 19th century, date), (Jonathan Harker, person), (English, language), (Transylvania, location), (Count Dracula, character), (Jonathan Harker, person), (Count Dracula, character), (eastern Europe, location), (Dracula, character), (Dracula, character)]                                                                                                                           1\n",
              "[(The Enchanted April, book), (England, location), (Italy, location), (Mrs. Wilkins, character), (Mrs. Arbuthnot, character), (Mrs. Wilkins, character), (castle, location), (Italy, location), (Women's Club, organization), (London, location), (Mrs. Arbuthnot, character), (Italy, location)]                                                                                                                                       1\n",
              "[(Pride and Prejudice, book), (Jane Austen, person), (Elizabeth Bennet, person), (Regency England, location), (Mrs. Bennet, person), (Mr. Bingley, person), (Netherfield Park, location), (Mrs. Bennet, person), (Mr. Bingley, person)]                                                                                                                                                                                                 1\n",
              "[(Moby Dick; Or, The Whale, book), (Herman Melville, person), (mid-19th century, date), (Ishmael, character), (Captain Ahab, character), (Ishmael, character), (Ishmael, character), (New Bedford, location), (Queequeg, character), (tattooed harpooner, character)]                                                                                                                                                                   1\n",
              "[(Romeo and Juliet, character), (William Shakespeare, actor), (late 16th century, date), (Romeo Montague, character), (Juliet Capulet, character), (Romeo and Juliet, character), (Benvolio, character), (Tybalt, character), (Mercutio, character), (Romeo, character), (Rosaline, character), (Romeo, actor), (Juliet, character), (Capulet ball, location)]                                                                          1\n",
              "[(William Shakespeare, person), (William Shakespeare, person), (histories, book), (Shakespeare, person), (language, language), (young man, character)]                                                                                                                                                                                                                                                                                  1\n",
              "[(Middlemarch, book), (George Eliot, person), (provincial English town, location), (Dorothea Brooke, character), (Miss Brooke, character), (Celia, character), (Mr. Brooke, character), (quiet country house, location), (Reverend Edward Casaubon, character), (Sir James Chettam, character)]                                                                                                                                         1\n",
              "[(Italy, location), (England, location), (Lucy Honeychurch, character), (Lucy, character), (Charlotte Bartlett, character), (Pension Bertolini, facility), (Florence, location), (Italy, location), (George, character), (Lucy, character)]                                                                                                                                                                                             1\n",
              "[(Meg, character), (Jo, character), (Beth, character), (Amy, character), (Louisa May Alcott, person), (Meg, character), (Jo, character), (Beth, character), (Amy March, character), (American Civil War, event), (Meg, character), (Jo, character), (Beth, character), (Amy, character)]                                                                                                                                                1\n",
              "[(Alice, character), (mid-19th century, date), (Alice, character), (riverbank, location), (White Rabbit, character), (Alice, character), (White Rabbit, character), (Alice, character), (Alice, character)]                                                                                                                                                                                                                             1\n",
              "[(The Blue Castle, book), (Valancy Stirling, character), (family, organization), (Valancy, character), (Valancy, character), (family, organization), (Valancy, character)]                                                                                                                                                                                                                                                              1\n",
              "[(Cranford, location), (Elizabeth Cleghorn Gaskell, person), (mid-19th century, date), (English village, location), (Miss Matty, character), (Captain Brown, character), (Cranford, location), (Miss Matty, character), (Captain Brown, character), (Cranford, location)]                                                                                                                                                               1\n",
              "[(The Picture of Dorian Gray, book), (Oscar Wilde, person), (late 19th century, date), (Dorian Gray, character), (Lord Henry Wotton, person), (Lord Henry Wotton, person), (Basil Hallward, person), (Dorian Gray, character), (Lord Henry, person)]                                                                                                                                                                                    1\n",
              "[(The Scarlet Letter, book), (Nathaniel Hawthorne, person), (Hester Prynne, character), (Puritan community, organization), (colonial Boston, location), (Hester Prynne, character)]                                                                                                                                                                                                                                                     1\n",
              "[(Ferdinand Count Fathom, character), (Tobias Smollett, person), (mid-18th century, date), (Ferdinand Count Fathom, character), (Fathom, character), (Fathom, character), (military encampments, location), (Fathom, character)]                                                                                                                                                                                                        1\n",
              "[(The Expedition of Humphry Clinker, book), (Tobias Smollett, person), (Bramble family, organization), (Wales, location), (England, location), (Matthew Bramble, character), (Lydia Melford, character), (Jonathan Dustwich, person), (Mr. Henry Davis, person), (Matthew Bramble, character), (Hot Well, location), (Bristol, location), (Bramble family, organization)]                                                               1\n",
              "[(Roderick Random, character), (early 18th century, date), (Roderick Random, character), (world, location), (Roderick Random, character), (world, location)]                                                                                                                                                                                                                                                                            1\n",
              "[(Tom Jones, character), (Henry Fielding, person), (early 18th century, date), (Tom Jones, character), (Squire Allworthy, person), (Squire Allworthy, person), (London, location), (Tom, character), (Tom, character), (Bridget, character), (Deborah, character), (Tom, character)]                                                                                                                                                    1\n",
              "[(My Life — Volume 1, book), (Richard Wagner, person), (Leipzig, location), (1842, date)]                                                                                                                                                                                                                                                                                                                                               1\n",
              "[(Twenty Years After, book), (Alexandre Dumas, person), (Auguste Maquet, person), (The Three Musketeers, book), (D'Artagnan, character), (Athos, character), (Porthos, character), (Aramis, character), (France, location), (Twenty Years After, book), (France, location), (Cardinal Richelieu, person), (Cardinal Mazarin, person), (Palais Royal, location), (D’Artagnan, character), (D’Artagnan, character), (Mazarin, person)]    1\n",
              "[(A Doll's House, book), (Nora Helmer, character), (Torvald Helmer, character), (Nora, character), (Christmas, event), (Torvald, character), (Nora, character), (Torvald, character), (Nora, character), (Torvald, character), (Nora, character), (Mrs. Linde, person), (Nora, character), (Krogstad, person), (Nora, character)]                                                                                                       1\n",
              "[(Metamorphosis, book), (late 19th century, date), (Gregor Samsa, character), (Metamorphosis, book), (Gregor Samsa, character)]                                                                                                                                                                                                                                                                                                         1\n",
              "[(The Odyssey, book), (Homer, person), (late 8th century BC, date), (Odysseus, character), (Trojan War, event), (Odysseus, character), (Penelope, person), (Telemachus, character), (The Odyssey, book), (Odysseus, character), (Ogygia, location), (Ithaca, location), (Olympus, location), (Odysseus, character), (Athena, person), (Ithaca, location), (Telemachus, character), (Athena, person), (Odysseus, character)]             1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description_entities</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>[]</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Frankenstein; Or, The Modern Prometheus, book), (early 19th century, date), (Victor Frankenstein, character), (Robert Walton, character), (Arctic, location), (Margaret, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(呻吟語, book), (Kun Lü, person), (late 16th century, date), (呻吟語, book), (author, person), (author, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Great Gatsby, book), (Nick Carraway, character), (Jay Gatsby, character), (Nick Carraway, character), (West Egg, location), (Daisy Buchanan, character), (Gatsby, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Sleepy Hollow, location), (Washington Irving, person), (Sleepy Hollow, location), (Ichabod Crane, character), (Sleepy Hollow, location), (Katrina Van Tassel, character), (Brom Bones, character), (Headless Horseman, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Huckleberry Finn, character), (late 19th century, date), (Huckleberry Finn, character), (American South, location), (Mississippi River, location), (Huck Finn, character), (Tom Sawyer, character), (Widow Douglas, person), (Jim, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Mr. Hyde, character), (Robert Louis Stevenson, person), (Mr. Utterson, person), (Dr. Jekyll, person), (Mr. Hyde, character), (Mr. Utterson, person), (Mr. Enfield, person), (Hyde, character), (Hyde, character), (Hyde, character), (Jekyll, person), (Jekyll, person), (Hyde, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Yellow Wallpaper, artwork), (late 19th century, date), (woman, character), (room, location), (woman, character), (secluded mansion, location), (nursery, location), (room, location), (yellow wallpaper, artwork), (woman, character), (dramatic climax, event)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Christmas, event), (early 19th century, date), (Ebenezer Scrooge, character), (Jacob Marley, actor), (Christmas, event), (Christmas, event), (Christmas, event), (Scrooge, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(French Revolution, event), (Mr. Jarvis Lorry, character), (Dr. Alexandre Manette, character), (England, location), (France, location), (Mr. Lorry, character), (Dover, location), (Dr. Manette, character), (Mr. Lorry, character), (Paris, location), (Revolution, event)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Zarathustra, character), (Friedrich Wilhelm Nietzsche, person), (late 19th century, date), (Zarathustra, character), (Superman, character), (Zarathustra, person), (Zarathustra, person), (Zarathustra, person), (Superman, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Brothers Karamazov, book), (Fyodor Dostoyevsky, person), (late 19th century, date), (Dmitri, character), (Ivan, character), (Alyosha, character), (Fyodor Pavlovitch, person), (Fyodor Pavlovitch Karamazov, character), (Dmitri, character), (Ivan, character), (Alyosha, character), (dramatic events, event)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Great Expectations, book), (Pip, character), (Pip, character), (fateful encounter, event), (convict, character), (Pip, character), (churchyard, location), (terrifying confrontation, event), (convict, character), (Pip, character), (Pip, character), (convict, character), (Pip, character), (convict, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Napoleonic Wars, event), (Anna Pavlovna, person), (Prince Vasili Kuragin, character), (Anna Pavlovna, person), (July 1805, date), (Petersburg society, organization), (Prince Vasili, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Crime and Punishment, book), (mid-19th century, date), (Rodion Raskolnikov, character), (St. Petersburg, location), (Raskolnikov, character), (July evening, date), (Raskolnikov, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Prince, book), (Niccolò Machiavelli, person), (early 16th century, date), (Machiavelli, person), (The Prince, book), (Machiavelli, person), (Machiavelli, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Leviathan, book), (Thomas Hobbes, person), (mid-17th century, date), (Hobbes, person), (Leviathan, book), (Hobbes, person), (Leviathan, book), (Hobbes, person), (Hobbes, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Jane Eyre, character), (Charlotte Brontë, person), (Jane Eyre, character), (Jane Eyre, character), (Gateshead Hall, location), (John Reed, person), (Jane, character), (red-room, location), (Jane, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Sherlock Holmes, character), (Sherlock Holmes, character), (Dr. John Watson, person), (Irene Adler, character), (Bohemia, location), (Holmes, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Souls of Black Folk, book), (W. E. B. Du Bois, person), (United States, location), (Du Bois, person), (Du Bois, person), (Emancipation, event), (Du Bois, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Ulysses, book), (Dublin, location), (Leopold Bloom, character), (Stephen Dedalus, character), (Molly Bloom, character), (June 16, 1904, date), (Ulysses, book), (Buck Mulligan, character), (Stephen Dedalus, character), (Martello tower, location), (Dublin, location), (Buck Mulligan, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Don Quijote, book), (early 17th century, date), (Don Quijote, character), (Sancho Panza, person), (Don Quijote, book), (Don Quijote, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Count of Monte Cristo, book), (Edmond Dantès, character), (Marseilles, location), (Edmond Dantès, character), (Marseilles, location), (Pharaon, book), (Danglars, book), (Fernand, character), (Mercédès, character), (Danglars, book)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(late 19th century, date), (John Worthing, character), (Algernon Moncrieff, character), (Algernon Moncrieff, character), (Lane, character), (John Worthing, character), (Gwendolen Fairfax, character), (Cecily Cardew, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Jonathan Swift, person), (early 18th century, date), (Ireland, location), (Swift, person), (British government, organization), (Swift, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Dracula, character), (Bram Stoker, person), (late 19th century, date), (Jonathan Harker, person), (English, language), (Transylvania, location), (Count Dracula, character), (Jonathan Harker, person), (Count Dracula, character), (eastern Europe, location), (Dracula, character), (Dracula, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Enchanted April, book), (England, location), (Italy, location), (Mrs. Wilkins, character), (Mrs. Arbuthnot, character), (Mrs. Wilkins, character), (castle, location), (Italy, location), (Women's Club, organization), (London, location), (Mrs. Arbuthnot, character), (Italy, location)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Pride and Prejudice, book), (Jane Austen, person), (Elizabeth Bennet, person), (Regency England, location), (Mrs. Bennet, person), (Mr. Bingley, person), (Netherfield Park, location), (Mrs. Bennet, person), (Mr. Bingley, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Moby Dick; Or, The Whale, book), (Herman Melville, person), (mid-19th century, date), (Ishmael, character), (Captain Ahab, character), (Ishmael, character), (Ishmael, character), (New Bedford, location), (Queequeg, character), (tattooed harpooner, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Romeo and Juliet, character), (William Shakespeare, actor), (late 16th century, date), (Romeo Montague, character), (Juliet Capulet, character), (Romeo and Juliet, character), (Benvolio, character), (Tybalt, character), (Mercutio, character), (Romeo, character), (Rosaline, character), (Romeo, actor), (Juliet, character), (Capulet ball, location)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(William Shakespeare, person), (William Shakespeare, person), (histories, book), (Shakespeare, person), (language, language), (young man, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Middlemarch, book), (George Eliot, person), (provincial English town, location), (Dorothea Brooke, character), (Miss Brooke, character), (Celia, character), (Mr. Brooke, character), (quiet country house, location), (Reverend Edward Casaubon, character), (Sir James Chettam, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Italy, location), (England, location), (Lucy Honeychurch, character), (Lucy, character), (Charlotte Bartlett, character), (Pension Bertolini, facility), (Florence, location), (Italy, location), (George, character), (Lucy, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Meg, character), (Jo, character), (Beth, character), (Amy, character), (Louisa May Alcott, person), (Meg, character), (Jo, character), (Beth, character), (Amy March, character), (American Civil War, event), (Meg, character), (Jo, character), (Beth, character), (Amy, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Alice, character), (mid-19th century, date), (Alice, character), (riverbank, location), (White Rabbit, character), (Alice, character), (White Rabbit, character), (Alice, character), (Alice, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Blue Castle, book), (Valancy Stirling, character), (family, organization), (Valancy, character), (Valancy, character), (family, organization), (Valancy, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Cranford, location), (Elizabeth Cleghorn Gaskell, person), (mid-19th century, date), (English village, location), (Miss Matty, character), (Captain Brown, character), (Cranford, location), (Miss Matty, character), (Captain Brown, character), (Cranford, location)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Picture of Dorian Gray, book), (Oscar Wilde, person), (late 19th century, date), (Dorian Gray, character), (Lord Henry Wotton, person), (Lord Henry Wotton, person), (Basil Hallward, person), (Dorian Gray, character), (Lord Henry, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Scarlet Letter, book), (Nathaniel Hawthorne, person), (Hester Prynne, character), (Puritan community, organization), (colonial Boston, location), (Hester Prynne, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Ferdinand Count Fathom, character), (Tobias Smollett, person), (mid-18th century, date), (Ferdinand Count Fathom, character), (Fathom, character), (Fathom, character), (military encampments, location), (Fathom, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Expedition of Humphry Clinker, book), (Tobias Smollett, person), (Bramble family, organization), (Wales, location), (England, location), (Matthew Bramble, character), (Lydia Melford, character), (Jonathan Dustwich, person), (Mr. Henry Davis, person), (Matthew Bramble, character), (Hot Well, location), (Bristol, location), (Bramble family, organization)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Roderick Random, character), (early 18th century, date), (Roderick Random, character), (world, location), (Roderick Random, character), (world, location)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Tom Jones, character), (Henry Fielding, person), (early 18th century, date), (Tom Jones, character), (Squire Allworthy, person), (Squire Allworthy, person), (London, location), (Tom, character), (Tom, character), (Bridget, character), (Deborah, character), (Tom, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(My Life — Volume 1, book), (Richard Wagner, person), (Leipzig, location), (1842, date)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Twenty Years After, book), (Alexandre Dumas, person), (Auguste Maquet, person), (The Three Musketeers, book), (D'Artagnan, character), (Athos, character), (Porthos, character), (Aramis, character), (France, location), (Twenty Years After, book), (France, location), (Cardinal Richelieu, person), (Cardinal Mazarin, person), (Palais Royal, location), (D’Artagnan, character), (D’Artagnan, character), (Mazarin, person)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(A Doll's House, book), (Nora Helmer, character), (Torvald Helmer, character), (Nora, character), (Christmas, event), (Torvald, character), (Nora, character), (Torvald, character), (Nora, character), (Torvald, character), (Nora, character), (Mrs. Linde, person), (Nora, character), (Krogstad, person), (Nora, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(Metamorphosis, book), (late 19th century, date), (Gregor Samsa, character), (Metamorphosis, book), (Gregor Samsa, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[(The Odyssey, book), (Homer, person), (late 8th century BC, date), (Odysseus, character), (Trojan War, event), (Odysseus, character), (Penelope, person), (Telemachus, character), (The Odyssey, book), (Odysseus, character), (Ogygia, location), (Ithaca, location), (Olympus, location), (Odysseus, character), (Athena, person), (Ithaca, location), (Telemachus, character), (Athena, person), (Odysseus, character)]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uh-a_mmcnOpT"
      },
      "source": [
        "# Traducción NMT"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define el modelo de traducción y el tokenizador\n",
        "tokenizador_traduccion = MarianTokenizer.from_pretrained('Helsinki-NLP/opus-mt-es-en')\n",
        "modelo_traduccion = MarianMTModel.from_pretrained('Helsinki-NLP/opus-mt-es-en')"
      ],
      "metadata": {
        "id": "N71fqxVx6a7Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qCuSk7vlZ0rd"
      },
      "outputs": [],
      "source": [
        "def traducir_procesar_preferencia_con_ner(preferencia):\n",
        "    # Traducir la preferencia del usuario al inglés\n",
        "    inputs = tokenizador_traduccion(preferencia, return_tensors=\"pt\")\n",
        "    outputs = modelo_traduccion.generate(**inputs, max_length=500)\n",
        "    preferencia_ingles = tokenizador_traduccion.decode(outputs[0], skip_special_tokens=True)\n",
        "\n",
        "    # Extraer entidades de la preferencia traducida\n",
        "    entidades_preferencia = obtener_entidades(preferencia_ingles)\n",
        "\n",
        "    return preferencia_ingles, entidades_preferencia"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "traducir_procesar_preferencia_con_ner traduce el texto de la preferencia ingresada al inglés.\n",
        "\n",
        "Luego, limpia el texto traducido y aplica NER para extraer las entidades principales.\n",
        "\n",
        "Devuelve la preferencia traducida (preferencia_ingles), su versión limpia (preferencia_ingles_limpia), y las entidades extraídas (entidades_preferencia).\n",
        "\n",
        "Con esto, pasaremos las entidades identificadas en la preferencia a la siguiente sección para usarlas en la comparación con las entidades de las descripciones."
      ],
      "metadata": {
        "id": "IU4Szgz_PVeM"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gXHjmfPqPzIP"
      },
      "source": [
        "# Recomendación de opciones"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En esta versión, el código calcula la similitud en base al número de entidades comunes entre la preferencia del usuario y cada entrada en el dataset, seleccionando las tres recomendaciones con la mayor cantidad de coincidencias."
      ],
      "metadata": {
        "id": "aBAJtaojPmhm"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M4woW7oOw6nr"
      },
      "outputs": [],
      "source": [
        "def obtener_top_3_con_ner(data, entidades_preferencia):\n",
        "    lista_coincidencias = []\n",
        "\n",
        "    # Traducir la preferencia del usuario y extraer entidades\n",
        "    #preferencia_ingles, entidades_preferencia = traducir_procesar_preferencia_con_ner(preferencia)\n",
        "\n",
        "    # Asegúrate de que se han encontrado entidades\n",
        "    if not entidades_preferencia:\n",
        "        print(\"No se detectaron entidades en la preferencia.\")\n",
        "\n",
        "    # Iterar sobre el dataset para contar coincidencias de entidades\n",
        "    for indice, fila in data.iterrows():\n",
        "        # Extraer las entidades de la descripción de la fila actual\n",
        "        entidades_descripcion = fila['Description_entities']  # Asegúrate de que esta columna exista\n",
        "\n",
        "        # Contar las coincidencias de entidades entre la preferencia y la descripción\n",
        "        coincidencias = sum(1 for entidad in entidades_preferencia if entidad in entidades_descripcion)\n",
        "\n",
        "        lista_coincidencias.append({\n",
        "            'index': indice,\n",
        "            'name': fila['name'],  # Asegúrate de que esta columna exista en tu DataFrame\n",
        "            'matches': coincidencias\n",
        "        })\n",
        "\n",
        "    # Crear un DataFrame con las coincidencias ordenadas\n",
        "    data_con_coincidencias = pd.DataFrame(lista_coincidencias)\n",
        "    data_con_coincidencias = data_con_coincidencias.sort_values(by='matches', ascending=False)\n",
        "\n",
        "    return data_con_coincidencias\n",
        "\n",
        "def mostrar_top_tres(top_data):\n",
        "    print(tabulate(top_data, headers='keys', tablefmt='pretty', showindex=False))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "preferencia = 'Homero el 19 en wales, aventuras modernas'\n",
        "preferencia_ingles, entidades_preferencia = traducir_procesar_preferencia_con_ner(preferencia)\n",
        "data1 = obtener_top_3_con_ner(df_libros, entidades_preferencia)\n",
        "print(entidades_preferencia)"
      ],
      "metadata": {
        "id": "kw82jdckivz2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bd99bd8d-8278-45da-e533-dfa0dc151fec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('Homer 19th', 'person'), ('Wales', 'location'), ('Modern Adventures', 'book')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "wLzDhkoIjYPr",
        "outputId": "959bc8b8-b6ba-4e6a-f926-4d6cc36273c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    index                                         name  matches\n",
              "15     15            The Expedition of Humphry Clinker        1\n",
              "0       0      Frankenstein; Or, The Modern Prometheus        0\n",
              "37     37                                War and Peace        0\n",
              "28     28               Adventures of Huckleberry Finn        0\n",
              "29     29  The Strange Case of Dr. Jekyll and Mr. Hyde        0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cdb8da94-fc30-4669-a5ca-397a7485830a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>name</th>\n",
              "      <th>matches</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>15</td>\n",
              "      <td>The Expedition of Humphry Clinker</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Frankenstein; Or, The Modern Prometheus</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>37</td>\n",
              "      <td>War and Peace</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>28</td>\n",
              "      <td>Adventures of Huckleberry Finn</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>29</td>\n",
              "      <td>The Strange Case of Dr. Jekyll and Mr. Hyde</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cdb8da94-fc30-4669-a5ca-397a7485830a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cdb8da94-fc30-4669-a5ca-397a7485830a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cdb8da94-fc30-4669-a5ca-397a7485830a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bf8aa0b0-4539-4b95-a9c7-12a6a44d2bec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf8aa0b0-4539-4b95-a9c7-12a6a44d2bec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bf8aa0b0-4539-4b95-a9c7-12a6a44d2bec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data1",
              "summary": "{\n  \"name\": \"data1\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 0,\n        \"max\": 49,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          26,\n          13,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"The Great Gatsby\",\n          \"The Scarlet Letter\",\n          \"Romeo and Juliet\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"matches\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Extracción de entidades: Para cada entrada en el dataset, extrae las entidades de la descripción.\n",
        "\n",
        "Conteo de coincidencias: Compara las entidades extraídas de la descripción con las entidades de la preferencia del usuario y cuenta cuántas coinciden.\n",
        "\n",
        "Selección del Top 3: Ordena las entradas en función del número de coincidencias y selecciona las tres con mayor cantidad."
      ],
      "metadata": {
        "id": "YGhvwRwFPw9C"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sPaxp93pxazH"
      },
      "source": [
        "# Programa principal"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Con base en el estado de ánimo del usuario y la frase ingresada, el programa ofrece recomendaciones pertinentes entre películas, juegos de mesa o libros."
      ],
      "metadata": {
        "id": "BUZ4hbfE9WJ4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# sin ner"
      ],
      "metadata": {
        "id": "5WwE4j2qO8AW"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IU7vQz5Rn5QU"
      },
      "outputs": [],
      "source": [
        "def programa_principal(b):\n",
        "    with output:\n",
        "        output.clear_output()\n",
        "        frase_usuario = frase_input.value\n",
        "        nro_estrellas = analizar_sentimiento_usuario(frase_usuario)\n",
        "        determinar_estado_animo(nro_estrellas)\n",
        "\n",
        "        print(\"-\" * 50)\n",
        "\n",
        "        # Obtener la preferencia del usuario\n",
        "        preferencia = preferencia_input.value\n",
        "        preferencia_ingles, entidades_preferencia = traducir_procesar_preferencia_con_ner(preferencia)\n",
        "\n",
        "        print(f\"Preferencia ingresada: '{preferencia}'\")\n",
        "        print(\"  Traducción:\", preferencia_ingles)\n",
        "        print(\"  Entidades detectadas:\", entidades_preferencia)\n",
        "\n",
        "        # Obtener las recomendaciones en base a entidades\n",
        "        #top_pelis = obtener_top_3_con_ner(df_pelis, entidades_preferencia)\n",
        "        #top_juegos = obtener_top_3_con_ner(df_juegos, entidades_preferencia)\n",
        "        top_libros = obtener_top_3_con_ner(df_libros, entidades_preferencia)\n",
        "\n",
        "        # Mostrar resultados\n",
        "        \"\"\"print(\"\\nTop 3 películas sugeridas:\")\n",
        "        mostrar_top_tres(top_pelis)\n",
        "\n",
        "        print(\"\\nTop 3 juegos sugeridos:\")\n",
        "        mostrar_top_tres(top_juegos)\"\"\"\n",
        "\n",
        "        print(\"\\nTop 3 libros sugeridos:\")\n",
        "        mostrar_top_tres(top_libros)\n",
        "\n",
        "def verificar_y_ejecutar(b):\n",
        "    mensaje_error.value = \"\"\n",
        "    # Verificar si ambos campos están completos\n",
        "    if not frase_input.value.strip() or not preferencia_input.value.strip():\n",
        "        mensaje_error.value = \"<span style='color: red;'>Por favor, completar todos los campos.</span>\"\n",
        "    else:\n",
        "        programa_principal(boton_recomendar)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Extracción de entidades: La función procesar_preferencia_con_ner procesa la preferencia del usuario y obtiene las entidades de interés.\n",
        "\n",
        "Obtención del Top 3 con NER: Las funciones obtener_top_3_con_ner aplican el modelo NER sobre cada dataset (películas, juegos, libros) para calcular las coincidencias y obtener el Top 3.\n",
        "\n",
        "Mostrar resultados: Muestra las recomendaciones con el formato adecuado."
      ],
      "metadata": {
        "id": "FUmVl2LyQNNi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir widgets de entrada\n",
        "frase_label = Label(value=\"¿Cómo te sentís hoy? :\")\n",
        "frase_input = Text(placeholder='Ejemplo: increíble', layout={'width': '60%', 'height': '10'})\n",
        "\n",
        "preferencia_label = Label(value=\"¿Tenés alguna temática preferida? :\")\n",
        "preferencia_input = Text(placeholder='Ejemplo: comedia romántica', layout={'width': '60%', 'height': '10'})\n",
        "\n",
        "# Botón y salida\n",
        "boton_recomendar = Button(description=\"Obtener Recomendaciones\", layout={'width': '15%'})\n",
        "output = Output()\n",
        "mensaje_error = HTML(value=\"\")\n",
        "\n",
        "# Conectar el evento de teclado al botón\n",
        "frase_input.on_submit(verificar_y_ejecutar)\n",
        "preferencia_input.on_submit(verificar_y_ejecutar)\n",
        "\n",
        "# Mostrar los widgets\n",
        "display(VBox([frase_label, frase_input, preferencia_label, preferencia_input, boton_recomendar, mensaje_error, output]))"
      ],
      "metadata": {
        "id": "Do7c0pVj6v4A",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441,
          "referenced_widgets": [
            "a584f4ed060c4741a95facd207c26288",
            "d1171d948b9c409cb1a221e32e9b3b46",
            "306614d12e314a15afb0e6b055f439bf",
            "61b5f7dfbbd74188988fba4540417dd8",
            "cf0bdbb348b84bda915b9c4fc737faa7",
            "6e79ba3f4b714f8bbd41ec37a8fa37a4",
            "8df532cfb7d54a4d99330938b126ca5c",
            "1ce916e09cf54852868a429df2f0b4af",
            "df9dba9d12dc4a1da426b3ff3320ab68",
            "2458ed2e35154bf592dbbbb9a185422f",
            "89ad077bb421460bab5790a4ee5ec1aa",
            "fe3ec4071ba1470186b76a2f7bb15321",
            "913317caa32d467cb34aaee24abe53b0",
            "8b7bf09883aa45279594eab1a8a6f2fb",
            "d95cddadda1542149a919d4af97ea420",
            "93118085d1da4b74b3695a8b4eb7852a",
            "cd07bf0ba25344288bfcec417d9eb30e",
            "e22c806699a54da792f0c411cdc6b0d0",
            "c45f0d495e5845cc922d6df9b9e7f1da",
            "537fbbc5459a4142bb0ab6eddb5420ba",
            "d3606589628f49d2b74f3dbc10089459",
            "8a1ba90f85b646e4801da05fedcb38f7"
          ]
        },
        "outputId": "9d1fb853-9d4f-46c0-d2fe-0c2ee1261d9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(Label(value='¿Cómo te sentís hoy? :'), Text(value='', layout=Layout(height='10', width='60%'), …"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a584f4ed060c4741a95facd207c26288"
            }
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "DhuN5ryWVAg8",
        "yznSUH8ekZV6",
        "XJuyNlQgknnW",
        "qv6zgUiTkrSX",
        "Uik5i9gnktZH",
        "hvwsvohx3thF",
        "Uh-a_mmcnOpT"
      ],
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "a584f4ed060c4741a95facd207c26288": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d1171d948b9c409cb1a221e32e9b3b46",
              "IPY_MODEL_306614d12e314a15afb0e6b055f439bf",
              "IPY_MODEL_61b5f7dfbbd74188988fba4540417dd8",
              "IPY_MODEL_cf0bdbb348b84bda915b9c4fc737faa7",
              "IPY_MODEL_6e79ba3f4b714f8bbd41ec37a8fa37a4",
              "IPY_MODEL_8df532cfb7d54a4d99330938b126ca5c",
              "IPY_MODEL_1ce916e09cf54852868a429df2f0b4af"
            ],
            "layout": "IPY_MODEL_df9dba9d12dc4a1da426b3ff3320ab68"
          }
        },
        "d1171d948b9c409cb1a221e32e9b3b46": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2458ed2e35154bf592dbbbb9a185422f",
            "placeholder": "​",
            "style": "IPY_MODEL_89ad077bb421460bab5790a4ee5ec1aa",
            "value": "¿Cómo te sentís hoy? :"
          }
        },
        "306614d12e314a15afb0e6b055f439bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_fe3ec4071ba1470186b76a2f7bb15321",
            "placeholder": "Ejemplo: increíble",
            "style": "IPY_MODEL_913317caa32d467cb34aaee24abe53b0",
            "value": "MAL"
          }
        },
        "61b5f7dfbbd74188988fba4540417dd8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8b7bf09883aa45279594eab1a8a6f2fb",
            "placeholder": "​",
            "style": "IPY_MODEL_d95cddadda1542149a919d4af97ea420",
            "value": "¿Tenés alguna temática preferida? :"
          }
        },
        "cf0bdbb348b84bda915b9c4fc737faa7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_93118085d1da4b74b3695a8b4eb7852a",
            "placeholder": "Ejemplo: comedia romántica",
            "style": "IPY_MODEL_cd07bf0ba25344288bfcec417d9eb30e",
            "value": "JUANA EN ESTADOS UNIDOS LEYENDO UN LIBRO"
          }
        },
        "6e79ba3f4b714f8bbd41ec37a8fa37a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Obtener Recomendaciones",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_e22c806699a54da792f0c411cdc6b0d0",
            "style": "IPY_MODEL_c45f0d495e5845cc922d6df9b9e7f1da",
            "tooltip": ""
          }
        },
        "8df532cfb7d54a4d99330938b126ca5c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_537fbbc5459a4142bb0ab6eddb5420ba",
            "placeholder": "​",
            "style": "IPY_MODEL_d3606589628f49d2b74f3dbc10089459",
            "value": ""
          }
        },
        "1ce916e09cf54852868a429df2f0b4af": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_8a1ba90f85b646e4801da05fedcb38f7",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "Frase del usuario: 'MAL'\n",
                  "  Sentimiento: 1 star, Score: 0.529\n",
                  "--------------------------------------------------\n"
                ]
              },
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "Preferencia ingresada: 'JUANA EN ESTADOS UNIDOS LEYENDO UN LIBRO'\n",
                  "  Traducción: JOHN IN THE UNITED STATES READING A BOOK\n",
                  "  Entidades detectadas: [('JOHN', 'PERSON')]\n",
                  "\n",
                  "Top 3 libros sugeridos:\n",
                  "+-----------------------------------------+-----------------------------+---------------------------------------+\n",
                  "|                  name                   |       director/author       |                 link                  |\n",
                  "+-----------------------------------------+-----------------------------+---------------------------------------+\n",
                  "| Frankenstein; Or, The Modern Prometheus | Mary Wollstonecraft Shelley |  https://www.gutenberg.org/ebooks/84  |\n",
                  "|              War and Peace              |      graf Leo Tolstoy       | https://www.gutenberg.org/ebooks/2600 |\n",
                  "|       The Legend of Sleepy Hollow       |      Washington Irving      |  https://www.gutenberg.org/ebooks/41  |\n",
                  "+-----------------------------------------+-----------------------------+---------------------------------------+\n"
                ]
              }
            ]
          }
        },
        "df9dba9d12dc4a1da426b3ff3320ab68": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2458ed2e35154bf592dbbbb9a185422f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "89ad077bb421460bab5790a4ee5ec1aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fe3ec4071ba1470186b76a2f7bb15321": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "10",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "60%"
          }
        },
        "913317caa32d467cb34aaee24abe53b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8b7bf09883aa45279594eab1a8a6f2fb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d95cddadda1542149a919d4af97ea420": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "93118085d1da4b74b3695a8b4eb7852a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "10",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "60%"
          }
        },
        "cd07bf0ba25344288bfcec417d9eb30e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e22c806699a54da792f0c411cdc6b0d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "15%"
          }
        },
        "c45f0d495e5845cc922d6df9b9e7f1da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "537fbbc5459a4142bb0ab6eddb5420ba": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d3606589628f49d2b74f3dbc10089459": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8a1ba90f85b646e4801da05fedcb38f7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d56b691d9fff4aa19f21609ad71a3f48": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ef56145106f541a38c9d7af3bbe8dfda",
              "IPY_MODEL_ca1507a69aa04dceb62310d23fcb53bc",
              "IPY_MODEL_43c474636dbf46eab4869ba727e2db13"
            ],
            "layout": "IPY_MODEL_7f5931f92adb460299047322e6a5038c"
          }
        },
        "ef56145106f541a38c9d7af3bbe8dfda": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ab408c190b3d46f39e17589a269717d2",
            "placeholder": "​",
            "style": "IPY_MODEL_68e9156f0bcd4200bd28869ded29d043",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "ca1507a69aa04dceb62310d23fcb53bc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b8a33435173c49a5a02e19f92400fef6",
            "max": 39,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_64de6b2833244bafb8cb06e1a9350d90",
            "value": 39
          }
        },
        "43c474636dbf46eab4869ba727e2db13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_34ede7f16642430a802079edecd81b9f",
            "placeholder": "​",
            "style": "IPY_MODEL_99b9b4cee7d74896b9823e200606a892",
            "value": " 39.0/39.0 [00:00&lt;00:00, 1.15kB/s]"
          }
        },
        "7f5931f92adb460299047322e6a5038c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ab408c190b3d46f39e17589a269717d2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "68e9156f0bcd4200bd28869ded29d043": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b8a33435173c49a5a02e19f92400fef6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "64de6b2833244bafb8cb06e1a9350d90": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "34ede7f16642430a802079edecd81b9f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "99b9b4cee7d74896b9823e200606a892": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8ced274322cc408c9e5427d73f84cca7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d76563d41c71426e92ccfe5293347c53",
              "IPY_MODEL_6b1548efe10648b9a2e11643487fc422",
              "IPY_MODEL_ee51d09295a247dca003afab2a5c5d9e"
            ],
            "layout": "IPY_MODEL_283a197213e64474acdd958a243037bd"
          }
        },
        "d76563d41c71426e92ccfe5293347c53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_948fdf8faf614a6496836fffa2608972",
            "placeholder": "​",
            "style": "IPY_MODEL_e87cb28e888f4021a5ef2e8f19ad7a17",
            "value": "vocab.txt: 100%"
          }
        },
        "6b1548efe10648b9a2e11643487fc422": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9d703a86fe2c4ab9b97cb84c42713b73",
            "max": 871891,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2b90b5eeaa2242a8a90c9a08346370a3",
            "value": 871891
          }
        },
        "ee51d09295a247dca003afab2a5c5d9e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_87a3142b3e7742b18798978bd91f738e",
            "placeholder": "​",
            "style": "IPY_MODEL_a3b072bb5596468ca5dfc0f821b0144f",
            "value": " 872k/872k [00:00&lt;00:00, 5.99MB/s]"
          }
        },
        "283a197213e64474acdd958a243037bd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "948fdf8faf614a6496836fffa2608972": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e87cb28e888f4021a5ef2e8f19ad7a17": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9d703a86fe2c4ab9b97cb84c42713b73": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b90b5eeaa2242a8a90c9a08346370a3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "87a3142b3e7742b18798978bd91f738e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a3b072bb5596468ca5dfc0f821b0144f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c2d839af69814bd9b3af8e69fc35bab5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_af030c35d44d436aac80cfca522572d0",
              "IPY_MODEL_4f6d0ee4635640bd970834d957649004",
              "IPY_MODEL_1eab6bf144d542e2a920ef34f74f1d66"
            ],
            "layout": "IPY_MODEL_ca4cc603a08b4b81ae269352ceace7ad"
          }
        },
        "af030c35d44d436aac80cfca522572d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3f7d083f162a496e9c4f473554c22b6a",
            "placeholder": "​",
            "style": "IPY_MODEL_cd347f68c9524ef094605f78ebc9f53d",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "4f6d0ee4635640bd970834d957649004": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a5e493c409924074a5ea7cd1c1fabaa5",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_63a5ba938b834c4ab4ca7c3787c33dc9",
            "value": 112
          }
        },
        "1eab6bf144d542e2a920ef34f74f1d66": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ce01342e7dc3433dafe3eaff8b448154",
            "placeholder": "​",
            "style": "IPY_MODEL_56388261ca724c6b9de8f56857533bb4",
            "value": " 112/112 [00:00&lt;00:00, 3.59kB/s]"
          }
        },
        "ca4cc603a08b4b81ae269352ceace7ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3f7d083f162a496e9c4f473554c22b6a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd347f68c9524ef094605f78ebc9f53d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a5e493c409924074a5ea7cd1c1fabaa5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "63a5ba938b834c4ab4ca7c3787c33dc9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ce01342e7dc3433dafe3eaff8b448154": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "56388261ca724c6b9de8f56857533bb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "947d55a122fe4061ae63eeafa024d127": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9847fa1728d64db28420fea9798a516a",
              "IPY_MODEL_6eb0c530caac44299702ec09594fa477",
              "IPY_MODEL_e1cd45df7dc54f6387448422b95e7fe9"
            ],
            "layout": "IPY_MODEL_9cce4f8dafa24de2acccb46c148c0f68"
          }
        },
        "9847fa1728d64db28420fea9798a516a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ad431f59a02c4ecdafeac8f6844f33ff",
            "placeholder": "​",
            "style": "IPY_MODEL_c04b3d6d7eff4134b56987cc4ffbc972",
            "value": "config.json: 100%"
          }
        },
        "6eb0c530caac44299702ec09594fa477": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e5c3f5caf1b8466e8f780d84b14830cb",
            "max": 953,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f20b638e09ae43ecb95f532f4a342bf8",
            "value": 953
          }
        },
        "e1cd45df7dc54f6387448422b95e7fe9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c14f68c3a0d148bfbc729ee6765e5f47",
            "placeholder": "​",
            "style": "IPY_MODEL_9b3c2bd9d35640eb86884da6b5ba34ae",
            "value": " 953/953 [00:00&lt;00:00, 39.7kB/s]"
          }
        },
        "9cce4f8dafa24de2acccb46c148c0f68": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ad431f59a02c4ecdafeac8f6844f33ff": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c04b3d6d7eff4134b56987cc4ffbc972": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e5c3f5caf1b8466e8f780d84b14830cb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f20b638e09ae43ecb95f532f4a342bf8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c14f68c3a0d148bfbc729ee6765e5f47": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9b3c2bd9d35640eb86884da6b5ba34ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e85f017889744e00ab6bd9d137b32681": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1a45a7182dfa416ea6a2d535cddef270",
              "IPY_MODEL_97192d810cc149f188649195edc5e663",
              "IPY_MODEL_630c189ecd1944118c9902bb84626e49"
            ],
            "layout": "IPY_MODEL_f51e16f442674ecbb85e0e8cf107df7a"
          }
        },
        "1a45a7182dfa416ea6a2d535cddef270": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4d6eb24963d44670b8bf12275909e148",
            "placeholder": "​",
            "style": "IPY_MODEL_4473d6a1db4d441085dfd07d0e7e964b",
            "value": "pytorch_model.bin: 100%"
          }
        },
        "97192d810cc149f188649195edc5e663": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e419eaf0aaee460d8c099c1d5718081a",
            "max": 669491321,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8dd1b97811094a7ea80c8d7b50a2d54d",
            "value": 669491321
          }
        },
        "630c189ecd1944118c9902bb84626e49": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d307f82623524158bf9c8c3d273fe653",
            "placeholder": "​",
            "style": "IPY_MODEL_42bb5559d5db436181856134c927c571",
            "value": " 669M/669M [00:03&lt;00:00, 201MB/s]"
          }
        },
        "f51e16f442674ecbb85e0e8cf107df7a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4d6eb24963d44670b8bf12275909e148": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4473d6a1db4d441085dfd07d0e7e964b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e419eaf0aaee460d8c099c1d5718081a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8dd1b97811094a7ea80c8d7b50a2d54d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d307f82623524158bf9c8c3d273fe653": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "42bb5559d5db436181856134c927c571": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}